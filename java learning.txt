自己定义一个包就是新建一个文件夹把该java代码放进去，这个类就在这个包中了，然后其他的类也可以放在这个文件夹下，它们就在同一个包中了。同一个包可以用其类的对象访问包中不同类的变量。public除外。
一个与a不同的包中的类想使用a的变量可以引入a所在的包import.
package Greek;
public class Alpha {
   protected int name;
   protected int age;
   protected void protectMethod()
{
System.out.println("protect");

}
}
package Greek;
public class Gamma {
  void accessMethod()
  {
    Alpha a=new Alpha();
    a.name=10;
    a.protectMethod();
  }  
}
import Greek.*;
public class Delta extends Alpha{//Delta extends Alpha Delta为子类，所以Delta可以访问Alpha中保护类型，而Alpha与Delta不在一个包中不可以用Alpha对象直接访问
    //访问Alpha的变量
   void accessMethod(Alpha a,Delta d)
   {
d.age=10;
d.accessMethod(a, d);

   } 
}



public class People {
    private String name;
    private int age;
    public People(String name1,int age1){
    name=name1;
    age=age1;}
    void print1(){
    System.out.println(name+" "+age);
    }}
    
    class Test{//一个文件里可以有多个类，但是只能有一个public类，在编译时产生多个不同的.class文件，//外部类     
    public static void main(String []args){
    People e1=new People("xiaoming",3);
    e1.print1();  
     
}}




import java.util.Arrays;
import java.util.Date;
import java.text.*;
import java.util.regex.*;
import java.io.*;
import java.util.Scanner;
 class Test2{
public static void Print(int []array)
{
    for(int x:array)
    {System.out.print(x);}
}



    /**
     * @param args
     */
    public static void main(String []args)throws IOException{

//System.out.println((int)(Math.random()*4));
//String s="ABC";
//System.out.println(Math.max(s.charAt(1),s.charAt(2)));
char ch='a';
char[]chararray={'a','b','c','d'};
Character ch2=new Character('a');/*
在实际开发过程中，我们经常会遇到需要使用对象，而不是内置数据类型的情况。
为了解决这个问题，Java语言为内置数据类型char提供了包装类Character类。
将一个char类型的参数传递给需要
一个Character类型参数的方法时，
那么编译器会自动地将char类型参数转换为Character对象。 
这种特征称为装箱，反过来称为拆箱。*/
//Java 提供了 String 类来创建和操作字符串。
String str="runoob";//在代码中遇到字符串常量时，
//这里的值是 "Runoob"，编译器会使用该值创建一个 String 对象。
//String 创建的字符串存储在公共池中，而 new 创建的字符串对象在堆上：
String s4=new String("abs");// String 对象创建
char[]helloarry={'a','b','c'};
String helloString=new String(helloarry);
String hello2=helloString+"hello";
System.out.println(hello2);
/*
 * 当对字符串进行修改的时候，需要使用 StringBuffer 和 StringBuilder 类。
和 String 类不同的是，StringBuffer 和 StringBuilder 
类的对象能够被多次的修改，并且不产生新的未使用对象。
 * 在使用 StringBuffer 类时，每次都会对 StringBuffer 对象本身进行操作，而不是生成新的对象，
 * 所以如果需要对字符串进行修改推荐使用 StringBuffer。
 * StringBuilder 类在 Java 5 中被提出，它和 StringBuffer 之间的最大不同在于 StringBuilder 的方法不是线程安全的（不能同步访问）。

由于 StringBuilder 相较于 StringBuffer 有速度优势，
所以多数情况下建议使用 StringBuilder 类。
 */
StringBuffer sb=new StringBuffer(10);
sb.append("abcdfrg");
System.out.println(sb);
sb.append("qq123");
System.out.println(sb);
sb.reverse();
System.out.println(sb);
sb.insert(2,"999");//将 999字符串插入此序列中第2个位置。
System.out.println(sb);
//replace(int start, int end, String str)
//使用给定 String 中的字符替换此序列的子字符串中的字符。
//创建数组
//Java语言使用new操作符来创建数组，语法如下：
int []arrayRefVar=new int[10];//java 
 //c++   
//int *array=new int[10]; delete[]array
int []array={2,1,3,4,5};
//Arrays 类
Arrays.sort(array);
for(int x:array)
{
System.out.print(x);

}
System.out.print('\n');

Print(array);
String[][]str1=new String[3][4];
str1[0][0]="a";

//Java 日期时间
//java.util 包提供了 Date 类来封装当前的日期和时间。 
//Date 类提供两个构造函数来实例化 Date 对象。
Date date =new Date();
System.out.println(date.toString());//显示现在的时间
//Date date=new Date("2022-9-29 16:22:20");
//使用 SimpleDateFormat 格式化日期
//SimpleDateFormat 是一个以语言环境敏感的方式来格式化和分析日期的类。
//SimpleDateFormat 允许你选择任何用户自定义日期时间格式来运行
SimpleDateFormat ft=new SimpleDateFormat("yyyy-MM-dd hh:mm:ss");
System.out.println(ft.format(date));
/*正则表达式
 * java.util.regex 包主要包括以下三个类：
 * pattern 对象是一个正则表达式的编译表示。Pattern 类没有公共构造方法。要创建一个 Pattern 对象，你必须首先调用其公共静态编译方法，它返回一个 Pattern 对象
 * 该方法接受一个正则表达式作为它的第一个参数。
 * Matcher 对象是对输入字符串进行解释和匹配操作的引擎
 * 与Pattern 类一样，Matcher 也没有公共构造方法。
 * 你需要调用 Pattern 对象的 matcher 方法来获得一个 Matcher 对象。
 */
String connect=new String ("I am noob " +"from runoob.com.");
String s=".*am.*";
//以下实例中使用了正则表达式 .*runoob.* 用于查找字符串中是否包了 runoob 子串：
boolean flag=Pattern.matches(s,connect);
System.out.println("is find?"+flag);
/*
 * System.out.println()，那么它是什么呢？
 * 系统类 System 中的标准输出对象 out 中的方法 println()。
 * 方法的命名规则
 * 方法的名字的第一个单词应以小写字母作为开头，后面的单词则用大写字母开头写
 * 例如：addPerson。
 * 修饰符 返回值类型 方法名(参数类型 参数名){}
 * 修饰符，这是可选的，告诉编译器如何调用该方法。定义了该方法的访问类型。
 * 修饰符 public static
 * 方法的重载,创建另一个有相同名字但参数不同的方法
 * //java方法
 * //使用 BufferedReader 在控制台读取字符
 * ava 的控制台输入由 System.in 完成。

为了获得一个绑定到控制台的字符流，
你可以把 System.in 包装在一个 BufferedReader 对象中来创建一个字符流。
 * BufferedReader 对象创建后，我们便可以使用 read() 方法从控制台读取一个字符
 * 
 * 
 * 
*/
char c;
 /*     
BufferedReader br=new BufferedReader(new InputStreamReader(System.in));
System.out.println("输入字符，按q退出");
do
{
c=(char) br.read();
System.out.println(c);
}while(c!='q');
//使用 System.in 创建 BufferedReader
BufferedReader br1 = new BufferedReader(new InputStreamReader(System.in));
String str3;
System.out.println("Enter lines of text.");
System.out.println("Enter 'end' to quit.");
do {
    str = br1.readLine();
    System.out.println(str);
} while (!str.equals("end"));
 //java输入数据
 //使用next方法，

Scanner scan=new Scanner(System.in);//通过 Scanner 类创建一个 Scanner ，控制台会一直等待输入
//直到输入回车
System.out.println("next方式接收");
//判断是否还有输入
if(scan.hasNext())
{
String str4=scan.nextLine();//字符串间可以有空格
String str5=scan.next();//字符串间不可以有空格
System.out.println("输入的数据为"+str4);
System.out.println("年龄");
int age=scan.nextInt();
System.out.println(age);
System.out.println("高");
float high=scan.nextFloat();
System.out.println(high);}
scan.close();}*/
System.out.println("stringbuffer");
StringBuffer str9=new StringBuffer();//
//str9="abd";错误 StringBuffer只能通过构造函数建立
    str9.append("abcdefr");
System.out.println(str9);
str9.delete(0,2);
System.out.println(str9);
char a=str9.charAt(0);
System.out.println(a);
str9.append("end");
String str13=str9.toString();
System.out.println(str13);
System.out.println(str9);
String str10=new String();//对于已经存在的string对象的修改都是重新创建一个对象，把新的值保存进去
System.out.println(str10);

Scanner scan=new Scanner(System.in);
StringBuffer b=new StringBuffer();
for(int i=0;i<2;i++)
{
String str19="";
//str19=scan.nextLine();
b.append(str19.toString());
}

System.out.print(b);

String[]anArry={"String one","String Two"};
for(String x:anArry)
{
System.out.print(x.toLowerCase());
}



    }



}




